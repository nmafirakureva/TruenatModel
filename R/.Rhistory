)
tosum2 <- c(setdiff(toget2, notwt), lyarm)
## heuristic to scale top value for thresholds:
heur <- c("id", "value", "deaths.int", "deaths.soc")
out <- D[, ..heur]
out <- out[, lapply(.SD, function(x) sum(x * value)), .SDcols = c("deaths.int", "deaths.soc"), by = id] # sum against popn
## topl <- 0.25/out[,mean(deaths.soc-deaths.iph)]
topl <- 500 # 100
lz <- seq(from = 0, to = topl, length.out = 1000) # threshold vector for CEACs
## staged costs by arm
soc.sc <- grep("soc", costsbystg, value = TRUE)
psoc.sc <- paste0("perATT.", soc.sc)
int.sc <- grep("int", costsbystg, value = TRUE)
pint.sc <- paste0("perATT.", int.sc)
## containers & loop
allout <- allpout <- allscout <- psapout <- list() # tabular outputs
allout2 <- allpout2 <- allscout2 <- psapout2 <- list() # tabular outputs
ceacl <- NMB <- list() # CEAC outputs etc
for (cn in isoz) {
dc <- D[isoz == cn]
cat("running model for:", cn, "0-14 years\n")
## --- costs
cols_to_remove <- intersect(cnmz, names(D))
dc[, (cols_to_remove) := NULL]
## add cost data
C <- MakeCostData(allcosts, nreps) # make cost PSA
dc <- merge(dc, C, by = "id", all.x = TRUE) # merge into PSA
## --- DALYs
## drop any that are there
if ("LYS" %in% names(dc)) dc[, c("LYS", "LYS0") := NULL]
dc <- merge(dc, LYKc[, .(age, LYS, LYS0)], by = "age", all.x = TRUE) # merge into PSA
## --- run model (quietly)
invisible(capture.output(dc <- runallfuns(dc, arm = arms)))
## --- grather outcomes
out <- dc[, ..toget]
out[, c(lyarm) := .(
LYS * deaths.soc, LYS * deaths.int,
LYS0 * deaths.soc, LYS0 * deaths.int
)] # LYL per pop by arm
## out[,sum(value),by=id]                                       #CHECK
out <- out[, lapply(.SD, function(x) sum(x * value, na.rm = T)), .SDcols = tosum, by = id] # sum against popn
## non-incremental cost per ATT
out[, costperATT.soc := cost.soc / att.soc]
out[, costperATT.int := cost.int / att.int]
out[, (psoc.sc) := lapply(.SD, function(x) x / att.soc), .SDcols = soc.sc]
out[, costperATT.int := cost.int / att.int]
out[, (pint.sc) := lapply(.SD, function(x) x / att.int), .SDcols = int.sc]
## increments wrt SOC (per child presenting at either DH/PHC)
out[, Dcost := cost.int - cost.soc] # inc costs
out[, Datt := att.int - att.soc] # inc atts
out[, attPC := 1e2 * att.int / att.soc] # rel inc atts
out[, Ddeaths := deaths.int - deaths.soc] # inc deaths
out[, DLYL0 := LYL0.int - LYL0.soc] # inc LYLs w/o discount
out[, DLYL := LYL.int - LYL.soc] # inc LYLs
## per whatever
out[, DcostperATT := cost.int / att.int - cost.soc / att.soc]
out[, Dcostperdeaths := -cost.int / deaths.int + cost.soc / deaths.soc]
out[, DcostperLYS0 := -cost.int / LYL0.int + cost.soc / LYL0.soc]
out[, DcostperLYS := -cost.int / LYL.int + cost.soc / LYL.soc]
## D/D
out[, DcostperDATT := Dcost / Datt]
out[, DcostperDdeaths := -Dcost / Ddeaths]
out[, DcostperDLYS0 := -Dcost / DLYL0]
out[, DcostperDLYS := -Dcost / DLYL]
## summarize
smy <- outsummary(out)
outs <- smy$outs
pouts <- smy$pouts
outs[, iso3 := cn]
pouts[, iso3 := cn]
## capture tabular
allout[[cn]] <- outs
allpout[[cn]] <- pouts
## capture data for NMB
NMB[[cn]] <- out[, .(iso3 = cn, DLYL, Dcost)]
## ceac data
ceacl[[cn]] <- data.table(
iso3 = cn,
int = make.ceac(out[, .(Q = -DLYL, P = Dcost)], lz),
threshold = lz
)
## --- grather outcomes for Table 2
out2 <- dc[, ..toget2]
out2[, c(lyarm) := .(
LYS * deaths.soc, LYS * deaths.int,
LYS0 * deaths.soc, LYS0 * deaths.int
)] # LYL per pop by arm
## out[,sum(value),by=id]                                       #CHECK
## TODO: check why the above is generating some NAs. Quick fix is using na.rm=TRUE
# cntcts <- out2[,sum(value),by=id]
out2 <- out2[, lapply(.SD, function(x) sum(x * value)), .SDcols = tosum2, by = id] # sum against popn
out3 <- dc[, ..toget3]
ttbs <- out3[tb != "noTB", .(ttb = sum(value), tx = sum(att.soc * value)), by = id] # true TB SOC
ttbi <- out3[tb != "noTB", .(ttb = sum(value), tx = sum(att.int * value)), by = id] # true TB INT
ftbs <- out3[tb == "noTB", .(ftb = sum(value), tx = sum(att.soc * value)), by = id] # false TB SOC
ftbi <- out3[tb == "noTB", .(ftb = sum(value), tx = sum(att.int * value)), by = id] # false TB INT
ftbs.phc <- out3[tb == "noTB", .(fptx = sum(att.soc * value), fptxphc = sum(PHC.treated.soc * value)), by = id] # false TB @ PHC SOC
ftbi.phc <- out3[tb == "noTB", .(fptx = sum(att.int * value), fptxphc = sum(PHC.treated.int * value)), by = id] # false TB @ PHC INT
## % FP tx at PHC
pfpphc <- data.table(
id = ftbs.phc[, (id)], pfp.soc = ftbs.phc[, (fptxphc / fptx)],
pfp.int = ftbi.phc[, (fptxphc / fptx)],
Dpftb = (ftbi.phc[, fptxphc / fptx] - ftbs.phc[, fptxphc / fptx])
)
## % True TB
ptt <- data.table(pttb.soc = ttbs[, (ttb)], pttb.int = ttbi[, (ttb)], Dpttb = (ttbi$ttb - ttbs$ttb))
## % true TB on ATT
pttatt <- data.table(pttbtx.soc = ttbs[, (tx / ttb)], pttbtx.int = ttbi[, (tx / ttb)], Dpttbtx = (ttbi[, tx / ttb] - ttbs[, tx / ttb]))
## % ATT FP
pfpatt <- data.table(
pftbtx.soc = ftbs[, (tx / out2$att.soc)],
pftbtx.int = (ftbi$tx / out2$att.int), Dpftbtx = (ftbi$tx / out2$att.int - ftbs$tx / out2$att.soc)
)
# join
ttb <- cbind(pfpphc, ptt, pttatt, pfpatt)
## add to out2
out2 <- merge(out2, ttb, by = "id", all.x = TRUE)
#
out2[, assessments.soc := DH.evaluated.soc + PHC.evaluated.soc]
out2[, assessments.int := DH.evaluated.int + PHC.evaluated.int]
out2[, passessphc.soc := PHC.evaluated.soc / assessments.soc]
out2[, passessphc.int := PHC.evaluated.int / assessments.int]
out2[, pbacassessphc.soc := (PHC.bacassess.soc) / bacassess.soc] # TODO change/check
out2[, pbacassessphc.int := (PHC.bacassess.int) / bacassess.int] # TODO change/check
out2[, presumptive.soc := DH.presumptive.soc + PHC.presumptive.soc]
out2[, presumptive.int := DH.presumptive.int + PHC.presumptive.int]
out2[, dx.soc := (dxc.soc + dxb.soc)]
out2[, dx.int := (dxc.int + dxb.int)]
out2[, pdxphc.soc := (PHC.diagnosed.soc) / dx.soc] # TODO change/check
out2[, pdxphc.int := (PHC.diagnosed.int) / dx.int] # TODO change/check
out2[, pdxb.soc := dxb.soc / (dxc.soc + dxb.soc)]
out2[, pdxb.int := dxb.int / (dxc.int + dxb.int)]
# out2[,pdxb.soc:=dxb.soc];
# out2[,pdxb.int:=dxb.int];
out2[, cost.assessments.soc := DH.evaluated.cost.soc + PHC.evaluated.cost.soc]
out2[, cost.assessments.int := DH.evaluated.cost.int + PHC.evaluated.cost.int]
out2[, patt.phc.soc := PHC.treated.soc / att.soc]
out2[, patt.phc.int := DH.treated.int / att.int]
out2[, patt.bac.soc := bactbtx.soc / att.soc]
out2[, patt.bac.int := bactbtx.int / att.int]
## increments
out2[, DPHC.presumptive := PHC.presumptive.int - PHC.presumptive.soc]
out2[, DDH.presumptive := DH.presumptive.int - DH.presumptive.soc]
out2[, DPHC.evaluated := PHC.evaluated.int - PHC.evaluated.soc]
out2[, DDH.evaluated := DH.evaluated.int - DH.evaluated.soc]
out2[, Dassessments := assessments.int - assessments.soc]
out2[, Dpassessphc := passessphc.int - passessphc.soc]
out2[, Dbacassess := bacassess.int - bacassess.soc]
out2[, Dpbacassessphc := pbacassessphc.int - pbacassessphc.soc]
out2[, Dpresumptive := presumptive.int - presumptive.soc]
out2[, Drefers := refers.int - refers.soc]
out2[, Ddx := dx.int - dx.soc]
out2[, Dpdxphc := pdxphc.int - pdxphc.soc]
out2[, Dpdxb := pdxb.int - pdxb.soc]
out2[, DPHC.treated := PHC.treated.int - PHC.treated.soc]
out2[, DDH.treated := DH.treated.int - DH.treated.soc]
out2[, Datt := att.int - att.soc]
out2[, Dpatt.phc := patt.phc.int - patt.phc.soc]
out2[, Dpatt.bac := patt.bac.int - patt.bac.soc]
out2[, DLYL := LYL.int - LYL.soc]
out2[, DLYL0 := LYL0.int - LYL0.soc]
out2[, Ddeaths := deaths.int - deaths.soc]
out2[, DPHC.evaluated.cost := PHC.evaluated.cost.int - PHC.evaluated.cost.soc]
out2[, DDH.evaluated.cost := DH.evaluated.cost.int - DH.evaluated.cost.soc]
out2[, DPHC.treated.cost := PHC.treated.cost.int - PHC.treated.cost.soc]
out2[, DDH.treated.cost := DH.treated.cost.int - DH.treated.cost.soc]
out2[, Dcost.assessments := cost.assessments.int - cost.assessments.soc]
out2[, Dcost := cost.int - cost.soc]
## summarize
smy2 <- Table2(out2) # NOTE set per 1000 index cases or HHs - adjust fac in contact_functions.R
outs2 <- smy2$outs
pouts2 <- smy2$pouts
outs2[, iso3 := cn]
pouts2[, iso3 := cn]
psapout2[[cn]] <- out2[, iso3 := cn]
## capture tabular
allout2[[cn]] <- outs2
allpout2[[cn]] <- pouts2
}
allout <- rbindlist(allout)
allpout <- rbindlist(allpout)
# allscout <- rbindlist(allscout)
ceacl <- rbindlist(ceacl)
NMB <- rbindlist(NMB)
allout2 <- rbindlist(allout2)
allpout2 <- rbindlist(allpout2)
fwrite(allout, file = gh("outdata/allout") + SA + ".csv")
fwrite(allpout, file = gh("outdata/allpout") + SA + ".csv")
fwrite(allout2, file = gh("outdata/allout2") + SA + ".csv")
fwrite(allpout2, file = gh("outdata/allpout2") + SA + ".csv")
# fwrite(allscout,file=gh('outdata/allscout') + SA + '.csv')
save(ceacl, file = gh("outdata/ceacl") + SA + ".Rdata")
save(NMB, file = gh("outdata/NMB") + SA + ".Rdata")
ICERS <- allpout2[, .(DLYL, Dcost, ICER = ICER)]
fwrite(ICERS, file = gh("outdata/ICERS") + SA + ".csv")
ICERS
# summary(out2[,.(Dpatt.bac*100,patt.bac.soc*100,patt.bac.int*100)])
# out2[,median(bactbtx.soc/att.soc)]*100
# out2[,median(bactbtx.int/att.int)]*100
#
# ## checks
# out[,.(att.int/att.soc)]
# out[,.(Datt/att.soc)]
# out[,.(att.soc,att.int)]
# out[,.(Ddeaths/Datt)] #OK
# out[,.(DLYL/Ddeaths)] #OK
# ## check
# allout[,.(costperATT.int.mid-costperATT.soc.mid,DcostperATT.mid)]
## CEAC plot
cbPalette <- c("#009E73")
ceaclm <- melt(ceacl, id = c("iso3", "threshold"))
ceaclm[, Intervention := ifelse(variable == "int", "Intervention", "Standard of care")]
## name key
ckey <- data.table(
iso3 = c("NGA"),
country = c("Nigeria")
)
ceaclm <- merge(ceaclm, ckey, by = "iso3", all.x = TRUE)
## plot: int only
GP <- ggplot(
ceaclm[variable == "int" &
iso3 %in% c("NGA")],
aes(threshold, value,
col = country, lty = Intervention
)
) +
# guides(color = "none") +
geom_line(show.legend = F) +
theme_classic(base_family = "Times-Roman") +
theme(legend.position = "top", legend.title = element_blank()) +
ggpubr::grids() +
ylab("Probability cost-effective") +
xlab("Cost-effectiveness threshold (USD/DALY averted)") +
scale_colour_manual(values = cbPalette)
GP
ggsave(GP, file = gh("plots/CEAC") + SA + ".png", w = 7, h = 5)
# # CE plane
DS <- dc[, .(
cost.SOC = sum(cost.soc * value),
cost.INT = sum(cost.int * value),
lyl.SOC = sum(deaths.soc * value * LYS),
lyl.INT = sum(deaths.int * value * LYS)
),
by = id
] # PSA summary
DS[, dDALY := lyl.SOC - lyl.INT]
DS[, dCost := cost.INT - cost.SOC]
CET <- CET |>
rename(CET = threshold) |>
mutate(CET = factor(CET, levels = c("0.5x GDP", "1x GDP")))
icer <- DS %>%
summarise(
cst = mean(dCost),
eff = mean(dDALY),
icer = format(round(mean(dCost) / mean(dDALY)), big.mark = ",", scientific = FALSE)
)
GP <- ggplot(DS, aes(dDALY, dCost)) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_point(alpha = 0.1, shape = 1) +
geom_point(
data = icer, aes(y = cst, x = eff),
size = 2, color = "red", shape = 20
) +
# geom_text(data = icer, aes(y = cst, x = 0.7, label=paste0('ICER=', 'US$',icer, '/DALY averted')), size = 3)+
geom_abline(
data = CET[CET %in% c("0.5x GDP", "1x GDP")],
aes(intercept = 0, slope = value, col = CET)
) +
scale_color_manual(
name = "",
values = c("#00BFC4", "#F8766D"),
labels = c("0.5x GDP", "1x GDP")
) +
# facet_wrap(~country, scales = 'free') +
scale_y_continuous(label = comma) +
xlab("Discounted disability adjusted life-years averted") +
ylab("Incremental cost (USD)") +
theme(legend.position = "top")
if (!shell) GP
fn1 <- glue(here("plots/CEplane")) + SA + ".png"
## fn2 <- glue(here('plots/CEplane')) + SAT + '.pdf'
ggsave(GP, file = fn1, w = 6, h = 5)
## ggsave(GP,file=fn2,w=10,h=10)
## PDF versions too big
#
#
ICERS
allout$ICER
ceaclm$threshold[ceaclm$value >= 0.5][1]
ceaclm$threshold[ceaclm$value == max(ceaclm$value)][1]
gh <- function(x) glue(here(x))
# Table 2: main results
table2 <- fread(gh("outdata/allpout2.csv"))
# table2 <- allpout2
table2 <- melt(table2, id.vars = "iso3")
table2$variable[grepl(".soc", table2$variable)]
unique(table2$variable)
table2$variable[grepl("^p", table2$variable)]
soc <- table2[grepl(".soc", variable), ]
unique(soc$variable)
keep <- c(
'pttb',
# 'presumptive',
"assessments",
"passessphc",
"bacassess",
"pbacassessphc",
"refers",
"att",
"patt.phc",
"pttbtx",
"patt.bac",
"pftbtx",
"dx",
"pdxphc",
"pdxb",
"deaths",
"LYL0",
"LYL",
# 'PHC.evaluated.cost', 'DH.evaluated.cost',
# 'PHC.treated.cost', 'DH.treated.cost',
"cost",
"ICER"
)
soc <- soc[, variable := gsub(".soc", "", variable)]
soc <- soc[variable %in% keep, ]
names(soc)[3] <- "Control"
int <- table2[grepl(".int", variable), ]
int <- int[!grepl("ICER", variable), ]
int <- int[, variable := gsub(".int", "", variable)]
int <- int[variable %in% keep, ]
names(int)[3] <- "Intervention"
d <- table2[grepl("D|DDH|DPHC|ICER", variable), ]
d <- d[!grepl("soc|int|DICER", variable), ]
d <- d[, variable := gsub("D", "", variable)]
d <- d[, variable := gsub("^H", "DH", variable)]
unique(d$variable)
d <- d[variable %in% keep, ]
setdiff(keep, unique(d$variable))
names(d)[3] <- "Increment"
merged <- merge(soc, int, by = c("iso3", "variable"), all.x = TRUE, all.y = TRUE)
merged <- merge(merged, d, by = c("iso3", "variable"), all.x = TRUE, all.y = TRUE)
unique(merged$variable)
# vars <- c('PHC.presumptive','DH.presumptive',
#           'presumptive',
#           'PHC.evaluated','DH.evaluated',
#           'assessments',
#           'refers',
#           'pdxb',
#           'PHC.treated','DH.treated',
#           'att',
#           'deaths','LYL',
#           'PHC.evaluated.cost', 'DH.evaluated.cost','cost.assessments',
#           'PHC.treated.cost', 'DH.treated.cost',
#           'cost', 'ICER')
vars <- keep
setdiff(vars, unique(merged$variable))
setdiff(unique(merged$variable), vars)
var_labs <- c(
"Prevalence of true TB",
"Total assessments",
"Percent assessments at PHC",
"Bacteriological assessments",
"Percent bacteriological assessments at PHC",
"Referrals to hospital",
"Anti-tuberculosis treatments (ATT)",
"Percent ATT initiated at PHC",
"Percent Percent of true TB receiving ATT",
"Percent of ATT bacteriologically confirmed",
"Percent of ATT false-positive",
"Tuberculosis diagnoses",
"Percent of TB at PHC",
"Percent of TB bacteriologically confirmed",
"Deaths",
"Disability-adjusted life years (DALYs)",
"Discounted DALYs",
# 'PHC.evaluated.cost', 'DH.evaluated.cost',
# 'PHC.treated.cost', 'DH.treated.cost',
"Cost (2024 US$)", "ICER (Cost per DALY averted)"
)
merged$variable <- factor(merged$variable,
levels = vars
)
setorder(merged, iso3, variable)
table2_format <- merged[, .(variable, "Standard of care" = Control, Intervention, Increment)]
table2_format$variable <- var_labs
names(table2_format)[1] <- "Quantity per 100 children with presumptive TB (unless stated)"
table2_format
fwrite(table2_format, file = here("outdata/table2.csv"))
# # Supplementary Table: Outcomes parameters
# parameters1 <- setDT(PD0[2:24,])
# parameters1 <- parameters1[!NAME %in% c('hivprev.u5', 'hivprev.o5'),]
# parameters1 <- parameters1[,.(NAME, DISTRIBUTION, 'MEAN (IQR)'=`MEDIAN..IQR.`, DESCRIPTION, SOURCE)]
#
# fwrite(parameters1,file=here('outdata/tableS1.csv'))
#
# # Supplementary Table: Cascade of care parameters (aggregated)
# # Need ParmsTab2,
# # ParmsTab2 <- fread(gh('outdata/Parameters2.csv'))
# ParmsTab2 <- fread(here('indata/proportions.csv'))
#
# ParmsTab2 <- ParmsTab2[,variable:=gsub('int.|soc.', '',variable)]
# # ParmsTab2 <- dcast(ParmsTab2, country+isoz+variable~care_model)
# unique(ParmsTab2$variable)
# ParmsTab2 <- ParmsTab2[!variable %in% c("frac.bac.noclin.dx" ,"frac.bac.7d.ass","frac.bac.7d.noclin.dx","frac.bac.7d.ltfu","frac.noclin.dx","frac.clin.7d.ass","frac.noclin.7d.dx","frac.clin.7d.ltfu","frac.tpt.not.assessed","frac.tpt.not.reassessed","frac.tpt.not.eligible","frac.tpt.not.reeligible",  "frac.pre.tpt.ltfu" ,"frac.pre.tpt.reltfu","frac.tpt.notcompleted")]
# unique(ParmsTab2$variable)
# length(unique(ParmsTab2$variable))
# vars <- c('frac.screened','frac.asymp','frac.symp',
#           'frac.need.rescr','frac.rescreened','frac.rescr.asymp','frac.rescr.symp',
#           'frac.tpt.assessed','frac.tpt.eligible','frac.tpt.initiated','frac.tpt.reassessed','frac.tpt.reeligible','frac.tpt.reinitiated','frac.tpt.completed',
#           'frac.symp.attending', "frac.tb.evaluation",
#           'frac.bac.assess','frac.bac.dx','frac.bac.clin.dx','frac.bac.7d.clin.dx','frac.clin.assess','frac.clin.dx',
#           'frac.clin.7d.dx')
#
# var_labs <- c('Screened for TB symptoms','Negative screening','Positive screening',
#               'Need re-screening','Re-screened for TB symptoms','Negative re-screening','Positive re-screening',
#               'Assessed for TPT','Eligible for TPT','Initiated on TPT',
#               'Re-assessed for TPT','Re-eligible for TPT','Re-initiated on TPT','TPT completed',
#               'Attending facility referral',"Evaluated for TB",
#               'Bacteriological assessment','Bacteriological diagnosis','Clinical diagnosis after bacteriological assessment','Clinical diagnosis after bacteriological assessment & 7 days',
#               'Clinical diagnosis without bacteriological assessment',
#               'Clinical diagnosis after bacteriological assessment & 7 days','Clinical diagnosis without bacteriological assessment & 7 days')
#
# ParmsTab2$variable <- factor(ParmsTab2$variable,
#                           levels = vars)
# setorder(ParmsTab2, country, variable)
#
# ParmsTab2 <- cbind(ParmsTab2[country=='Cameroon',.(variable, Control=SOC, Intervention=INT)], ParmsTab2[country=='Uganda', .(Control=SOC, Intervention=INT)])
# ParmsTab2$variable <- var_labs
# ParmsTab2
# fwrite(ParmsTab2,file=here('outdata/tableS2.csv'))
#
# # Supplementary Table: Cascade of care parameters (disaggregated)
# # Need ParmsTab2,
# ParmsTab2a <- fread(gh('outdata/Parameters2a.csv'))
# ParmsTab2a <- ParmsTab2a[,variable:=gsub('int.|soc.', '',variable)]
# ParmsTab2a <- dcast(ParmsTab2a, country+isoz+variable+age~care_model)
# unique(ParmsTab2a$variable)
# ParmsTab2a <- ParmsTab2a[!variable %in% c('frac.bac.7d.noclin.dx','frac.bac.noclin.dx','frac.clin.7d.noclin.dx','frac.noclin.dx')]
# vars <- c('frac.screened','frac.rescreened',
#           'frac.asymp','frac.tpt.eligible','frac.tpt.initiated','frac.tpt.completed',
#           'frac.symp','frac.rescr.symp','frac.symp.attending',
#           'frac.bac.assess','frac.bac.dx','frac.bac.clin.dx','frac.clin.dx',
#           'frac.bac.7d.clin.dx','frac.clin.7d.clin.dx')
#
# var_labs <- c('Screened for TB symptoms','Re-screened for TB symptoms',
#               'Negative for TB symptoms','frac.tpt.eligible','frac.tpt.initiated','frac.tpt.completed',
#               'Positive for TB symptoms','Positive for TB symptoms (@re-screening)','Attending facility referral',
#               'Bacteriological assessment','Bacteriological diagnosis','Clinical diagnosis after bacteriological assessment',
#               'Clinical diagnosis without bacteriological assessment',
#               'Clinical diagnosis after bacteriological assessment & 7 days','Clinical diagnosis without bacteriological assessment & 7 days')
#
# ParmsTab2a$variable <- factor(ParmsTab2a$variable,
#                              levels = vars)
# setorder(ParmsTab2a, country, isoz, variable)
#
# ParmsTab2a <- cbind(ParmsTab2a[isoz=='CMR',.(age, variable, Control=SOC, Intervention=INT)], ParmsTab2a[isoz=='UGA', .(Control=SOC, Intervention=INT)])
# ParmsTab2a$variable <- rep(var_labs, each=2)
# ParmsTab2a
# fwrite(ParmsTab2a,file=here('outdata/tableS2a.csv'))
#
# # Supplementary Table: Cascade of care parameters (disaggregated)
# # Need DENR,
# DENR <- data.table(read_excel(here("indata/Baseline information.xlsx"), sheet = 'Sheet1', range = 'O3:R19'))
# DENR <- melt(DENR, variable.name = 'isoz')
# DENR <- DENR[,country:=ifelse(isoz=='CMR', 'Cameroon', 'Uganda')]
#
# TBPREV <- fread(here("indata/tb_epi.csv"))
# TBPREV[, isoz:=ifelse(country=='Uganda', 'UGA', 'CMR')]
# # TBPREV <- TBPREV[rando=='INT',]
# TBPREV <- TBPREV[,model:=ifelse(rando=='INT', 'int', 'soc')]
# TBPREV <- melt(TBPREV, id.vars = c('country','isoz','model', 'rando'), variable.name = 'metric')
# order <- names(DENR)
# ParmsTab3 <- rbind(DENR, TBPREV[,..order])
# ParmsTab3 <- ParmsTab3[, model:=ifelse(model=='soc', 'Control', 'Intervention')]
# ParmsTab3 <- dcast(ParmsTab3, country+isoz+metric~model)
# ParmsTab3 <- ParmsTab3[!metric %in% c('declared_per_household', 'enrolled_per_household', 'frac.declared.u5',
#                                       'frac.declared.hiv')]
# unique(ParmsTab3$metric)
# vars <- c('declared_per_index_case','enrolled_per_index_case','frac.enrolled.u5','frac.enrolled.hiv','tb_prev','tb_inc')
# var_labs <- c('Child contacts declared per index case','Child contacts enrolled per index case','Child contacts enrolled under 5 years','Child contacts enrolled HIV+','TB co-prevalence intervention','TB incidence intervention')
#
# ParmsTab3$metric <- factor(ParmsTa
View(table2)
View(table2_format)
39-27
46-32
library(here)
library(data.table)
library(glue)
library(googlesheets4)
## NOTE new sheet
## create an ID to access the googlesheets results sheet
yourl <- "https://docs.google.com/spreadsheets/d/1tn35_3kI6aRlZIwbyrsFtgRNJsVLjpbSBSVJdPfEBsY/edit?gid=0#gid=0"
shid <- as.character(as_sheets_id(yourl))
## utility function
upload.to.sheets <- function(basename,filename,sheetid
){
filename <- gsub("\\.csv$","",filename) #safety in case csv included at and
fn <- glue(basename) + filename + ".csv"
tmp <- fread(file=fn)
write_sheet(tmp,sheetid,sheet=filename)
}
## upload relevant table data
# upload.to.sheets(here('outdata/'),'table2',shid) #first will need to re-authenticate
# ## rest can be run as block
shidneat <- as.character(as_sheets_id(yourl))
# Main results
## ---- Table 2 -------
Table2 <- fread(gh('outdata/table2.csv'))
write_sheet(Table2,shidneat,sheet="Tab2RAW")
