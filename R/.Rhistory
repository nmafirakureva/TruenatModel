MakeTreeParms(D,P)
source(here('R/truenat_functions.R'))      #functions for tree parameters
## number of reps
nreps <- 1e3
set.seed(1234)
## attributes to use
hivlevels <- c(0,1)
artlevels <- c(0,1)
tblevels <- c('TB', 'noTB') # Active TB disease, no TB
agelevels <- c('0-4','5-14')
isoz <- c('NGA') #relevant countries
## --- life years and other outputs NOTE needs to be set FALSE on first run thru
LYSdone <- FALSE
if(!LYSdone){
## make discounted life-years if they haven't been done
LYKc <- GetLifeYears(isolist=isoz,discount.rate=0.03,yearfrom=2021)
LYKc0 <- GetLifeYears(isolist=isoz,discount.rate=0.00,yearfrom=2021)
LYKc5 <- GetLifeYears(isolist=isoz,discount.rate=0.05,yearfrom=2021)
LYKc <- merge(LYKc,LYKc0[,.(iso3,age,LYS0=LYS)],by=c('iso3','age'))
LYKc <- merge(LYKc,LYKc5[,.(iso3,age,LYS5=LYS)],by=c('iso3','age'))
LYK <- LYKc[,.(LYS=mean(LYS),LYS0=mean(LYS0),LYS5=mean(LYS5)),by=.(age)] #averaged life-years 4 generic tests
save(LYKc,file=here('indata/LYKc.Rdata'))
save(LYK,file=here('indata/LYK.Rdata'))
} else {
load(file=here('indata/LYKc.Rdata'))
load(file=here('indata/LYK.Rdata'))
}
# # Sensitivity analysis: 0% & 5% discount rates
# if(SA %in% c('hi','lo')){
#   LYKc[,LYS:=ifelse(SA=='lo', LYS0,
#                     ifelse(SA=='hi',LYS5, LYS))]
# }
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
names(PD)
names(PDCO)
# Quick check & fix
unique(PD$parm)
PDCO$parm <- ifelse(PDCO$parm=='phc.prusumed', 'phc.presumed', PDCO$parm)
## parameters to be determined from cascade data
PD0 <- PD |>
mutate(DISTRIBUTION = as.numeric(DISTRIBUTION)) |>
filter(!is.na(DISTRIBUTION))
## the rest
PD1 <- PD |>
mutate(dist = as.numeric(DISTRIBUTION)) |>
filter(is.na(dist)) |>
select(-dist)
names(PDCO)
names(PD0)
unique(PDCO$parm)
PD2 <- rbind(
PDCO |>
rename(NAME = parm, DISTRIBUTION = frac) |>
filter(!grepl('clinbac.assess|TrueNat|TBLamp', NAME)) |> # dropping things not needed for now
select(NAME, DISTRIBUTION),
PD0 |>
select(NAME, DISTRIBUTION)) |>
distinct(NAME, .keep_all = TRUE) |>
pivot_wider(names_from = NAME, values_from = DISTRIBUTION)
# convert into parameter object
P <- parse.parmtable(PD1)
## make base PSA dataset
set.seed(1234) #random number seed
D0 <- makePSA(nreps,P,dbls = list(c('cfrhivor','cfrartor')))
## use these parameters to construct input data by attribute
D0 <- makeAttributes(D0)
D0[,sum(value),by=.(id, tb)] #CHECK
# merge in fixed parameters
D0 <- cbind(D0, PD2)
## read and make cost data
rcsts <- CD
names(CD)
rcsts <- setDT(rcsts)
## turn cost data into PSA
rcsts[is.na(rcsts)] <- 0 # some quick fix >> setting NA to 0
rcsts[cost.sd==0,cost.sd:=cost.m/40]        #SD such that 95% UI ~ 10% of mean
allcosts <- rcsts[,.(cost=parm, cost.m, cost.sd)]
C <- MakeCostData(allcosts,nreps)               # make cost PSA NOTE using CMR cost data
## NOTE can re-run from here to implement changes to MakeTreeParms
## add cost data
D <- merge(D0,C,by=c('id'),all.x=TRUE)       # merge into PSA (differentiated D and D0 to facilitate rerunning)
## compute other parameters (adds by side-effect)
MakeTreeParms(D,P)
source(here('R/truenat_functions.R'))      #functions for tree parameters
## number of reps
nreps <- 1e3
set.seed(1234)
## attributes to use
hivlevels <- c(0,1)
artlevels <- c(0,1)
tblevels <- c('TB', 'noTB') # Active TB disease, no TB
agelevels <- c('0-4','5-14')
isoz <- c('NGA') #relevant countries
## --- life years and other outputs NOTE needs to be set FALSE on first run thru
LYSdone <- FALSE
if(!LYSdone){
## make discounted life-years if they haven't been done
LYKc <- GetLifeYears(isolist=isoz,discount.rate=0.03,yearfrom=2021)
LYKc0 <- GetLifeYears(isolist=isoz,discount.rate=0.00,yearfrom=2021)
LYKc5 <- GetLifeYears(isolist=isoz,discount.rate=0.05,yearfrom=2021)
LYKc <- merge(LYKc,LYKc0[,.(iso3,age,LYS0=LYS)],by=c('iso3','age'))
LYKc <- merge(LYKc,LYKc5[,.(iso3,age,LYS5=LYS)],by=c('iso3','age'))
LYK <- LYKc[,.(LYS=mean(LYS),LYS0=mean(LYS0),LYS5=mean(LYS5)),by=.(age)] #averaged life-years 4 generic tests
save(LYKc,file=here('indata/LYKc.Rdata'))
save(LYK,file=here('indata/LYK.Rdata'))
} else {
load(file=here('indata/LYKc.Rdata'))
load(file=here('indata/LYK.Rdata'))
}
# # Sensitivity analysis: 0% & 5% discount rates
# if(SA %in% c('hi','lo')){
#   LYKc[,LYS:=ifelse(SA=='lo', LYS0,
#                     ifelse(SA=='hi',LYS5, LYS))]
# }
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
names(PD)
names(PDCO)
# Quick check & fix
unique(PD$parm)
PDCO$parm <- ifelse(PDCO$parm=='phc.prusumed', 'phc.presumed', PDCO$parm)
## parameters to be determined from cascade data
PD0 <- PD |>
mutate(DISTRIBUTION = as.numeric(DISTRIBUTION)) |>
filter(!is.na(DISTRIBUTION))
## the rest
PD1 <- PD |>
mutate(dist = as.numeric(DISTRIBUTION)) |>
filter(is.na(dist)) |>
select(-dist)
names(PDCO)
names(PD0)
unique(PDCO$parm)
PD2 <- rbind(
PDCO |>
rename(NAME = parm, DISTRIBUTION = frac) |>
filter(!grepl('clinbac.assess|TrueNat|TBLamp', NAME)) |> # dropping things not needed for now
select(NAME, DISTRIBUTION),
PD0 |>
select(NAME, DISTRIBUTION)) |>
distinct(NAME, .keep_all = TRUE) |>
pivot_wider(names_from = NAME, values_from = DISTRIBUTION)
# convert into parameter object
P <- parse.parmtable(PD1)
## make base PSA dataset
set.seed(1234) #random number seed
D0 <- makePSA(nreps,P,dbls = list(c('cfrhivor','cfrartor')))
## use these parameters to construct input data by attribute
D0 <- makeAttributes(D0)
D0[,sum(value),by=.(id, tb)] #CHECK
# merge in fixed parameters
D0 <- cbind(D0, PD2)
## read and make cost data
rcsts <- CD
names(CD)
rcsts <- setDT(rcsts)
## turn cost data into PSA
rcsts[is.na(rcsts)] <- 0 # some quick fix >> setting NA to 0
rcsts[cost.sd==0,cost.sd:=cost.m/40]        #SD such that 95% UI ~ 10% of mean
allcosts <- rcsts[,.(cost=parm, cost.m, cost.sd)]
C <- MakeCostData(allcosts,nreps)               # make cost PSA NOTE using CMR cost data
## NOTE can re-run from here to implement changes to MakeTreeParms
## add cost data
D <- merge(D0,C,by=c('id'),all.x=TRUE)       # merge into PSA (differentiated D and D0 to facilitate rerunning)
## compute other parameters (adds by side-effect)
MakeTreeParms(D,P)
source(here('R/truenat_functions.R'))      #functions for tree parameters
## number of reps
nreps <- 1e3
set.seed(1234)
## attributes to use
hivlevels <- c(0,1)
artlevels <- c(0,1)
tblevels <- c('TB', 'noTB') # Active TB disease, no TB
agelevels <- c('0-4','5-14')
isoz <- c('NGA') #relevant countries
## --- life years and other outputs NOTE needs to be set FALSE on first run thru
LYSdone <- FALSE
if(!LYSdone){
## make discounted life-years if they haven't been done
LYKc <- GetLifeYears(isolist=isoz,discount.rate=0.03,yearfrom=2021)
LYKc0 <- GetLifeYears(isolist=isoz,discount.rate=0.00,yearfrom=2021)
LYKc5 <- GetLifeYears(isolist=isoz,discount.rate=0.05,yearfrom=2021)
LYKc <- merge(LYKc,LYKc0[,.(iso3,age,LYS0=LYS)],by=c('iso3','age'))
LYKc <- merge(LYKc,LYKc5[,.(iso3,age,LYS5=LYS)],by=c('iso3','age'))
LYK <- LYKc[,.(LYS=mean(LYS),LYS0=mean(LYS0),LYS5=mean(LYS5)),by=.(age)] #averaged life-years 4 generic tests
save(LYKc,file=here('indata/LYKc.Rdata'))
save(LYK,file=here('indata/LYK.Rdata'))
} else {
load(file=here('indata/LYKc.Rdata'))
load(file=here('indata/LYK.Rdata'))
}
# # Sensitivity analysis: 0% & 5% discount rates
# if(SA %in% c('hi','lo')){
#   LYKc[,LYS:=ifelse(SA=='lo', LYS0,
#                     ifelse(SA=='hi',LYS5, LYS))]
# }
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
names(PD)
names(PDCO)
# Quick check & fix
unique(PD$parm)
PDCO$parm <- ifelse(PDCO$parm=='phc.prusumed', 'phc.presumed', PDCO$parm)
## parameters to be determined from cascade data
PD0 <- PD |>
mutate(DISTRIBUTION = as.numeric(DISTRIBUTION)) |>
filter(!is.na(DISTRIBUTION))
## the rest
PD1 <- PD |>
mutate(dist = as.numeric(DISTRIBUTION)) |>
filter(is.na(dist)) |>
select(-dist)
names(PDCO)
names(PD0)
unique(PDCO$parm)
PD2 <- rbind(
PDCO |>
rename(NAME = parm, DISTRIBUTION = frac) |>
filter(!grepl('clinbac.assess|TrueNat|TBLamp', NAME)) |> # dropping things not needed for now
select(NAME, DISTRIBUTION),
PD0 |>
select(NAME, DISTRIBUTION)) |>
distinct(NAME, .keep_all = TRUE) |>
pivot_wider(names_from = NAME, values_from = DISTRIBUTION)
# convert into parameter object
P <- parse.parmtable(PD1)
## make base PSA dataset
set.seed(1234) #random number seed
D0 <- makePSA(nreps,P,dbls = list(c('cfrhivor','cfrartor')))
## use these parameters to construct input data by attribute
D0 <- makeAttributes(D0)
D0[,sum(value),by=.(id, tb)] #CHECK
# merge in fixed parameters
D0 <- cbind(D0, PD2)
## read and make cost data
rcsts <- CD
names(CD)
rcsts <- setDT(rcsts)
## turn cost data into PSA
rcsts[is.na(rcsts)] <- 0 # some quick fix >> setting NA to 0
rcsts[cost.sd==0,cost.sd:=cost.m/40]        #SD such that 95% UI ~ 10% of mean
allcosts <- rcsts[,.(cost=parm, cost.m, cost.sd)]
C <- MakeCostData(allcosts,nreps)               # make cost PSA NOTE using CMR cost data
## NOTE can re-run from here to implement changes to MakeTreeParms
## add cost data
D <- merge(D0,C,by=c('id'),all.x=TRUE)       # merge into PSA (differentiated D and D0 to facilitate rerunning)
## compute other parameters (adds by side-effect)
MakeTreeParms(D,P)
names(D)[grepl('cost', names(D))]
## checks
D[,sum(value),by=.(isoz,id)] #CHECK
## checks
D[,sum(value),by=.(id)] #CHECK
D[,sum(value),by=.(id,age)] #CHECK
## checks
D[,sum(value),by=.(id, tb)] #CHECK
D[,sum(value),by=.(id,age, tb)] #CHECK
## checks
D[,sum(value),by=.(id, age)] #CHECK
D[,sum(value),by=.(id,age, tb)] #CHECK
## check for leaks
head(SOC.F$checkfun(D)) #SOC arm
head(INT.F$checkfun(D)) #INT arm
## checks
INT.F$checkfun(A) #NOTE OK
SOC.F$checkfun(A) #NOTE OK
PDCO
gsub('prusumed', 'presumed', PDCO$parm)
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
names(PD)
names(PDCO)
# Quick check & fix
unique(PD$parm)
PDCO$parm <- gsub('prusumed', 'presumed', PDCO$parm)
## parameters to be determined from cascade data
PD0 <- PD |>
mutate(DISTRIBUTION = as.numeric(DISTRIBUTION)) |>
filter(!is.na(DISTRIBUTION))
## the rest
PD1 <- PD |>
mutate(dist = as.numeric(DISTRIBUTION)) |>
filter(is.na(dist)) |>
select(-dist)
names(PDCO)
names(PD0)
unique(PDCO$parm)
PD2 <- rbind(
PDCO |>
rename(NAME = parm, DISTRIBUTION = frac) |>
filter(!grepl('clinbac.assess|TrueNat|TBLamp', NAME)) |> # dropping things not needed for now
select(NAME, DISTRIBUTION),
PD0 |>
select(NAME, DISTRIBUTION)) |>
distinct(NAME, .keep_all = TRUE) |>
pivot_wider(names_from = NAME, values_from = DISTRIBUTION)
# convert into parameter object
P <- parse.parmtable(PD1)
## make base PSA dataset
set.seed(1234) #random number seed
D0 <- makePSA(nreps,P,dbls = list(c('cfrhivor','cfrartor')))
## use these parameters to construct input data by attribute
D0 <- makeAttributes(D0)
D0[,sum(value),by=.(id, tb)] #CHECK
# merge in fixed parameters
D0 <- cbind(D0, PD2)
## read and make cost data
rcsts <- CD
names(CD)
rcsts <- setDT(rcsts)
## turn cost data into PSA
rcsts[is.na(rcsts)] <- 0 # some quick fix >> setting NA to 0
rcsts[cost.sd==0,cost.sd:=cost.m/40]        #SD such that 95% UI ~ 10% of mean
allcosts <- rcsts[,.(cost=parm, cost.m, cost.sd)]
C <- MakeCostData(allcosts,nreps)               # make cost PSA NOTE using CMR cost data
## NOTE can re-run from here to implement changes to MakeTreeParms
## add cost data
D <- merge(D0,C,by=c('id'),all.x=TRUE)       # merge into PSA (differentiated D and D0 to facilitate rerunning)
## compute other parameters (adds by side-effect)
MakeTreeParms(D,P)
names(D)[grepl('cost', names(D))]
## checks
D[,sum(value),by=.(id, age)] #CHECK
D[,sum(value),by=.(id,age, tb)] #CHECK
## check for leaks
head(SOC.F$checkfun(D)) #SOC arm
# Quick check & fix
unique(PD$parm)
# Quick check & fix
unique(PDCO$parm)
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
names(PD)
names(PDCO)
# Quick check & fix
unique(PDCO$parm)
## Pete version
## quick run through the PPD pathways tree
## flags for sensitivity analyses
shell <- FALSE # whether running from shell script or not
if(shell){
## running from shell
args <- commandArgs(trailingOnly=TRUE)
print(args)
SA <- args[1]                  # none,base/lo/hi,tptru,hicoprev
if(SA == 'none'){
SA <- ''
}
} else { #set by hand
rm(list=ls()) #clear all
shell <- FALSE #whether running from shell script or not
##sensitivity analyses (mostly for PT):
## '' = basecase
## 'discr'='base'/'lo'/'hi'
## 'cdr' = making cdr higher for incidence
## 'txd' = making the completion influence tx/pt outcome
sacases <- c('','lo','tptru','hicoprev', 'ctryeff','ugaattcsts', 'cdr', 'hivprev')
SA <- sacases[1]
}
# rm(list=ls())
library(here)
library(tidyverse)
## load other scripts
source(here('R/truenat_pathways_tree1.R'))           #tree structure and namings: also tree functions & libraries
source(here('R/truenat_functions.R'))      #functions for tree parameters
## number of reps
nreps <- 1e3
set.seed(1234)
## attributes to use
hivlevels <- c(0,1)
artlevels <- c(0,1)
tblevels <- c('TB', 'noTB') # Active TB disease, no TB
agelevels <- c('0-4','5-14')
isoz <- c('NGA') #relevant countries
## --- life years and other outputs NOTE needs to be set FALSE on first run thru
LYSdone <- FALSE
if(!LYSdone){
## make discounted life-years if they haven't been done
LYKc <- GetLifeYears(isolist=isoz,discount.rate=0.03,yearfrom=2021)
LYKc0 <- GetLifeYears(isolist=isoz,discount.rate=0.00,yearfrom=2021)
LYKc5 <- GetLifeYears(isolist=isoz,discount.rate=0.05,yearfrom=2021)
LYKc <- merge(LYKc,LYKc0[,.(iso3,age,LYS0=LYS)],by=c('iso3','age'))
LYKc <- merge(LYKc,LYKc5[,.(iso3,age,LYS5=LYS)],by=c('iso3','age'))
LYK <- LYKc[,.(LYS=mean(LYS),LYS0=mean(LYS0),LYS5=mean(LYS5)),by=.(age)] #averaged life-years 4 generic tests
save(LYKc,file=here('indata/LYKc.Rdata'))
save(LYK,file=here('indata/LYK.Rdata'))
} else {
load(file=here('indata/LYKc.Rdata'))
load(file=here('indata/LYK.Rdata'))
}
# # Sensitivity analysis: 0% & 5% discount rates
# if(SA %in% c('hi','lo')){
#   LYKc[,LYS:=ifelse(SA=='lo', LYS0,
#                     ifelse(SA=='hi',LYS5, LYS))]
# }
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDI <- read.csv(here('indata/CASCI.csv')) #read in presentation parameters
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
PDC
## Pete version
## quick run through the PPD pathways tree
## flags for sensitivity analyses
shell <- FALSE # whether running from shell script or not
if(shell){
## running from shell
args <- commandArgs(trailingOnly=TRUE)
print(args)
SA <- args[1]                  # none,base/lo/hi,tptru,hicoprev
if(SA == 'none'){
SA <- ''
}
} else { #set by hand
rm(list=ls()) #clear all
shell <- FALSE #whether running from shell script or not
##sensitivity analyses (mostly for PT):
## '' = basecase
## 'discr'='base'/'lo'/'hi'
## 'cdr' = making cdr higher for incidence
## 'txd' = making the completion influence tx/pt outcome
sacases <- c('','lo','tptru','hicoprev', 'ctryeff','ugaattcsts', 'cdr', 'hivprev')
SA <- sacases[1]
}
# rm(list=ls())
library(here)
library(tidyverse)
## load other scripts
source(here('R/truenat_pathways_tree1.R'))           #tree structure and namings: also tree functions & libraries
source(here('R/truenat_functions.R'))      #functions for tree parameters
## number of reps
nreps <- 1e3
set.seed(1234)
## attributes to use
hivlevels <- c(0,1)
artlevels <- c(0,1)
tblevels <- c('TB', 'noTB') # Active TB disease, no TB
agelevels <- c('0-4','5-14')
isoz <- c('NGA') #relevant countries
## --- life years and other outputs NOTE needs to be set FALSE on first run thru
LYSdone <- FALSE
if(!LYSdone){
## make discounted life-years if they haven't been done
LYKc <- GetLifeYears(isolist=isoz,discount.rate=0.03,yearfrom=2021)
LYKc0 <- GetLifeYears(isolist=isoz,discount.rate=0.00,yearfrom=2021)
LYKc5 <- GetLifeYears(isolist=isoz,discount.rate=0.05,yearfrom=2021)
LYKc <- merge(LYKc,LYKc0[,.(iso3,age,LYS0=LYS)],by=c('iso3','age'))
LYKc <- merge(LYKc,LYKc5[,.(iso3,age,LYS5=LYS)],by=c('iso3','age'))
LYK <- LYKc[,.(LYS=mean(LYS),LYS0=mean(LYS0),LYS5=mean(LYS5)),by=.(age)] #averaged life-years 4 generic tests
save(LYKc,file=here('indata/LYKc.Rdata'))
save(LYK,file=here('indata/LYK.Rdata'))
} else {
load(file=here('indata/LYKc.Rdata'))
load(file=here('indata/LYK.Rdata'))
}
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
## prior parameters
PD <- read.csv(here('indata/parms.csv')) #read in main parameters
PDI <- read.csv(here('indata/CASCI.csv')) #read in presentation parameters
PDA <- read.csv(here('indata/CASCA.csv')) #read in age splits
PDC <- read.csv(here('indata/CASCP.csv')) #read in cascade parameters
PDO <- read.csv(here('indata/CASCPO.csv')) #read in outcome parameters
# AD <- read.csv(here('indata/DiagnosticAccuracy.csv')) #read in accuracy parameters
# RD <- fread(gh('indata/RUParms.csv'))    #read resource use data
CD <- fread(gh('indata/costs.csv'))    #read cost data
PDCO <- rbind(PDC,PDO) # combine cascade and outcome parameters
PDCO <- rbind(PDC,PDO, PDI, PDA) # combine cascade and outcome parameters
PDC
PDO
PDI
PDA
PDCO <- rbind(PDC,PDO, PDI, PDA) # combine cascade and outcome parameters
PDA
PDCO <- rbind(PDC,PDO, PDI, PDA |>  select(-x)) # combine cascade and outcome parameters
names(PDA)
PDA |>  select(-x)
PDI
PDCO <- rbind(PDC,PDO, PDI) # combine cascade and outcome parameters
PDI
